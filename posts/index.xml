<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Sushant Rajbanshi</title>
        <link>https://f0-x.github.io/posts/</link>
        <description>All Posts | Sushant Rajbanshi</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Mar 2025 00:00:00 &#43;0115</lastBuildDate><atom:link href="https://f0-x.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Scalable Cash Dispensing via Kafka Concurrency</title>
    <link>https://f0-x.github.io/posts/cash-dispensing-kafka/</link>
    <pubDate>Thu, 27 Mar 2025 00:00:00 &#43;0115</pubDate><guid>https://f0-x.github.io/posts/cash-dispensing-kafka/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/cover-image-cash-dispenser.jpeg" referrerpolicy="no-referrer">
            </div>We&rsquo;ve all experienced that moment of relief when an ATM successfully dispenses our cash. But behind that simple transaction lies a complex dance of systems working together. In this post, I&rsquo;ll walk you through how I tackled the challenge of processing cash dispense requests at scale using Kafka and Python&rsquo;s asyncio.
This approach grew out of a real problem I faced at work recently - how to allow multiple payment transactions to happen simultaneously across different locations while making sure we never had conflicting operations at any single cash machine.]]></description>
</item>
<item>
    <title>Trying GoLang for the first time</title>
    <link>https://f0-x.github.io/posts/ts-dev-tries-go/</link>
    <pubDate>Tue, 23 Jul 2024 00:00:00 &#43;0115</pubDate><guid>https://f0-x.github.io/posts/ts-dev-tries-go/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/golang-exciting.jpeg" referrerpolicy="no-referrer">
            </div>As someone who has been involved in software development for over 3 years, I have primarily worked with JavaScript -and nowadays Typescript mostly- although I have also used languages like Python for specific projects. In this article, I want to share my initial impressions of the Go programming language as a web developer. I don&rsquo;t intend for this to be a negative critique of JavaScript, as there are already plenty of those.]]></description>
</item>
<item>
    <title>How I Approach State Management on React</title>
    <link>https://f0-x.github.io/posts/react-state-management/</link>
    <pubDate>Sat, 08 Jun 2024 00:00:00 &#43;0115</pubDate><guid>https://f0-x.github.io/posts/react-state-management/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/react-state-options.jpg" referrerpolicy="no-referrer">
            </div>Us React developers, we often find ourselves grappling with the age-old question: Which state management approach should you use ?  It depends ü§°   React offers a variety of state management solutions, each with its own strengths and weaknesses, and the choice ultimately depends on the specific requirements of your project. To help navigate this decision, I follow this self-made flow chart which serves as an excellent guide, taking into account various factors such as data sharing requirements, data fetching needs, and whether you&rsquo;re dealing with forms or multiple components.]]></description>
</item>
<item>
    <title>ES6 Maps are underrated!</title>
    <link>https://f0-x.github.io/posts/js-map-vs-array/</link>
    <pubDate>Wed, 22 May 2024 00:00:00 &#43;0545</pubDate><guid>https://f0-x.github.io/posts/js-map-vs-array/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/maps-vs-array-feature-image.jpg" referrerpolicy="no-referrer">
            </div>Javascript Map is a rarely used data structure, hence it is not as widely understood as it would first appear, also is not as little as it first appears. We will start off with some fundamentals in this post and gradually head towards explaining the Map&rsquo;s function as well as certain situations in which it may be helpful.
The Big ‚≠ï Notation Understanding Big O Notation is crucial for analyzing the efficiency and scalability of algorithms and data structures.]]></description>
</item>
<item>
    <title>How to TailWind CSS like a Pro</title>
    <link>https://f0-x.github.io/posts/tailwind-best-practises/</link>
    <pubDate>Tue, 23 Apr 2024 00:00:00 &#43;0545</pubDate><guid>https://f0-x.github.io/posts/tailwind-best-practises/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/assets/tailwind-wizard.jpg" referrerpolicy="no-referrer">
            </div>In this article, I‚Äôll share some best practices for working with Tailwind CSS, which I usually prefer to follow and have learnt over a period of time. By following these tips, you can keep your application clean, organized, and maintainable, even as your project grows.
1. Utilize Design Tokens ü™ô Design tokens are like special containers that hold all the important things that make your designs look good, like colors, sizes, fonts, and where things break on a screen.]]></description>
</item>
<item>
    <title>Intuji UI Components ‚ôæÔ∏è</title>
    <link>https://f0-x.github.io/posts/ui-components/</link>
    <pubDate>Fri, 05 Apr 2024 00:00:00 &#43;0545</pubDate><guid>https://f0-x.github.io/posts/ui-components/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/assets/cover-image.jpg" referrerpolicy="no-referrer">
            </div>The Need for a Robust UI Component Library As our web application grew in complexity, we found ourselves constantly reinventing the wheel when it came to building user interfaces. Our development team was spending too much time creating and maintaining custom UI components, leading to inconsistent styles, duplicated code, and a suboptimal developer experience.
 To address these challenges, we decided to invest in building a comprehensive UI component library that would serve as the foundation for our application&rsquo;s user interface.]]></description>
</item>
<item>
    <title>‚ú®Shiny Skeleton Animation using TailwindCSSüí®</title>
    <link>https://f0-x.github.io/posts/tailwind-skeleton/</link>
    <pubDate>Sun, 03 Jul 2022 00:00:00 &#43;0545</pubDate><guid>https://f0-x.github.io/posts/tailwind-skeleton/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/assets/featured-image.gif" referrerpolicy="no-referrer">
            </div>Content loaders, skeleton screens, ghost elements, and content placeholders. These are the names given to the effect we&rsquo;ll be exploring today. Many companies, such as LinkedIn, Facebook, YouTube and Slack, use this effect in their apps and websites, as you may have noticed. As much as we developers want our websites to load as quickly as possible, there are times when a lot of data needs to be rendered on the page, so Skeleton screens are a great option.]]></description>
</item>
</channel>
</rss>
