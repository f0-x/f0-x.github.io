<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>javascript - Tag - Sushant Rajbanshi</title>
        <link>https://f0-x.github.io/tags/javascript/</link>
        <description>javascript - Tag - Sushant Rajbanshi</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Jun 2024 00:00:00 &#43;0115</lastBuildDate><atom:link href="https://f0-x.github.io/tags/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>How I Approach State Management on React</title>
    <link>https://f0-x.github.io/posts/react-state-management/</link>
    <pubDate>Sat, 08 Jun 2024 00:00:00 &#43;0115</pubDate><guid>https://f0-x.github.io/posts/react-state-management/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/react-state-options.jpg" referrerpolicy="no-referrer">
            </div>Us React developers, we often find ourselves grappling with the age-old question: Which state management approach should you use ?  It depends ðŸ¤¡   React offers a variety of state management solutions, each with its own strengths and weaknesses, and the choice ultimately depends on the specific requirements of your project. To help navigate this decision, I follow this self-made flow chart which serves as an excellent guide, taking into account various factors such as data sharing requirements, data fetching needs, and whether you&rsquo;re dealing with forms or multiple components.]]></description>
</item>
<item>
    <title>ES6 Maps are underrated!</title>
    <link>https://f0-x.github.io/posts/js-map-vs-array/</link>
    <pubDate>Wed, 22 May 2024 00:00:00 &#43;0545</pubDate><guid>https://f0-x.github.io/posts/js-map-vs-array/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/maps-vs-array-feature-image.jpg" referrerpolicy="no-referrer">
            </div>Javascript Map is a rarely used data structure, hence it is not as widely understood as it would first appear, also is not as little as it first appears. We will start off with some fundamentals in this post and gradually head towards explaining the Map&rsquo;s function as well as certain situations in which it may be helpful.
The Big â­• Notation Understanding Big O Notation is crucial for analyzing the efficiency and scalability of algorithms and data structures.]]></description>
</item>
</channel>
</rss>
