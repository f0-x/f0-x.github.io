<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>architecture - Category - Sushant Rajbanshi</title>
        <link>https://f0-x.github.io/categories/architecture/</link>
        <description>architecture - Category - Sushant Rajbanshi</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Mar 2025 00:00:00 &#43;0115</lastBuildDate><atom:link href="https://f0-x.github.io/categories/architecture/" rel="self" type="application/rss+xml" /><item>
    <title>Scalable Cash Dispensing via Kafka Concurrency</title>
    <link>https://f0-x.github.io/posts/cash-dispensing-kafka/</link>
    <pubDate>Thu, 27 Mar 2025 00:00:00 &#43;0115</pubDate><guid>https://f0-x.github.io/posts/cash-dispensing-kafka/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/cover-image-cash-dispenser.jpeg" referrerpolicy="no-referrer">
            </div>We&rsquo;ve all experienced that moment of relief when an ATM successfully dispenses our cash. But behind that simple transaction lies a complex dance of systems working together. In this post, I&rsquo;ll walk you through how I tackled the challenge of processing cash dispense requests at scale using Kafka and Python&rsquo;s asyncio.
This approach grew out of a real problem I faced at work recently - how to allow multiple payment transactions to happen simultaneously across different locations while making sure we never had conflicting operations at any single cash machine.]]></description>
</item>
</channel>
</rss>
